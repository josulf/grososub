//
//  MyDocument.m
//  GrosoSub
//
//  Created by Josu L칩pez Fern치ndez on 19/11/08.
//  Copyright (C) 2008 Josu L칩pez Fern치ndez <fregona@fregona.biz>.
//	All rights reserved.
//
//	This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; only version 2 of the License.
//
//	This program is distributed in the hope that it will be useful,
//	but WITHOUT ANY WARRANTY; without even the implied warranty of
//	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//	GNU General Public License for more details.
//
//	You should have received a copy of the GNU General Public License along
//	with this program; if not, write to the Free Software Foundation, Inc.,
//  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//

#import "MyDocument.h"


@implementation MyDocument

@synthesize name;
@synthesize headers;
@synthesize styles;
@synthesize events;

- (id)init
{
    self = [super init];
    if (self) {
		headers = [[ASSHeader alloc] init];
		styles = [[ASSStyleList alloc] init];
		events = [[ASSEventList alloc] init];
        // Add your subclass-specific initialization here.
        // If an error occurs here, send a [self release] message and return nil.
    }
    return self;
}

- (NSString *)windowNibName
{
    // Override returning the nib file name of the document
    // If you need to use a subclass of NSWindowController or if your document supports multiple NSWindowControllers, you should remove this method and override -makeWindowControllers instead.
    return @"MyDocument";
}

- (void)windowControllerDidLoadNib:(NSWindowController *) aController
{
    [super windowControllerDidLoadNib:aController];
    // Add any code here that needs to be executed once the windowController has loaded the document's window.
}

- (NSData *)dataOfType:(NSString *)typeName error:(NSError **)outError
{
	NSString *megaString = @"";

	if ([typeName isEqualToString:@"Advanced SubStation Alpha"]) {
		// HEADERS
		megaString = [megaString stringByAppendingFormat:@"[Script Info]\n; Script generated by %@\n", @"GrosoSub v0.0"];
		megaString = [megaString stringByAppendingString:[headers description]];
		// STYLES
		megaString = [megaString stringByAppendingString:@"\n[V4+ Styles]\nFormat: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n"];
		megaString = [megaString stringByAppendingString:[styles description]];
		// EVENTS
		megaString = [megaString stringByAppendingString:@"\n[Events]\nFormat: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n"];
		megaString = [megaString stringByAppendingString:[events description]];
	} else if ([typeName isEqualToString:@"SubRip"]) {
		megaString = @"TODO";
	} else if ([typeName isEqualToString:@"MicroDVD"]) {
		megaString = @"TODO";
	}
	
	return [megaString dataUsingEncoding:NSUTF8StringEncoding];
}

- (BOOL)readFromData:(NSData *)data ofType:(NSString *)typeName error:(NSError **)outError
{
	NSString *megaString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
	
	if ([typeName isEqualToString:@"Advanced SubStation Alpha"]) {
		NSString *hString, *sString, *eString;
		
		NSScanner *scanner = [NSScanner scannerWithString:megaString];
		// We should delete the data of the new script
		[headers clean];
		[styles clean];
		[events clean];
		
		[scanner scanString:@"[Script Info]" intoString:NULL];
		
		// We need to know if the lines are comments (;)
		Boolean comments = NO;
		while (!comments) {
			NSUInteger l = [scanner scanLocation];
			NSString *line;
			[scanner scanUpToString:@"\n" intoString:&line];
			if ([line characterAtIndex:0] != ';') { //not comment
				comments = YES;
				[scanner setScanLocation:l]; //go back on the scanner
			}
		}
		
		// HEADER
		[scanner scanUpToString:@"[V4+ Styles]" intoString:&hString];
		[headers parseString:hString];
		
		// Skip unuseful lines (2)
		[scanner scanUpToString:@"\n" intoString:NULL];
		[scanner scanUpToString:@"\n" intoString:NULL];
		[scanner scanUpToString:@"Style:" intoString:NULL];
		
		// STYLES
		[scanner scanUpToString:@"[Events]" intoString:&sString];
		[styles parseString:sString];
		
		// Skip unuseful lines (2)
		[scanner scanUpToString:@"\n" intoString:NULL];
		[scanner scanUpToString:@"\n" intoString:NULL];
		eString = [megaString substringFromIndex:[scanner scanLocation]];
		[events parseString:eString];
		
	}
	
	return YES;
}

@end
